[{"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/index.js":"1","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/App.js":"2","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/store.js":"3","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/PrivateRoute.js":"4","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/FourOhFour.js":"5","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/AuthForms/SignUp.js":"6","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Home.js":"7","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/AuthForms/Login.js":"8","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/AuthForms/Logout.js":"9","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/AuthForms/PasswordReset.js":"10","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/AuthForms/ForgotPassword.js":"11","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Job/Job.js":"12","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/MainPage/MainPage.js":"13","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Account/Account.js":"14","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/RootReducer.js":"15","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Nav.js":"16","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Loading.js":"17","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/MainPage/JobPreview.js":"18","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Auth/actions.js":"19","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/customHooks/useFormValidation.js":"20","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Account/AccountHeader.js":"21","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Account/AccountDetail.js":"22","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Auth/reducer.js":"23","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Jobs/reducer.js":"24","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Jobs/actions.js":"25","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/JobForms/JobForms.js":"26","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Account/actions.js":"27","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Account/reducer.js":"28","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/AppNotes/reducer.js":"29","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Interviews/reducer.js":"30","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/helpers/dateToday.js":"31","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Job/ApplicationCard/index.js":"32","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Job/InterviewCard/index.js":"33","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Job/JobDetailsCard/index.js":"34","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/MainPage/StageTracker.js":"35","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Auth/constants.js":"36","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/helpers/validateAuth.js":"37","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Jobs/constants.js":"38","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/AppNotes/actions.js":"39","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Interviews/actions.js":"40","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/JobForms/InterviewDetailsForm.js":"41","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/JobForms/JobDetailsForm.js":"42","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/ApiRequests/auth.js":"43","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/ApiRequests/jobs.js":"44","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/JobForms/ApplicationDetailsForm.js":"45","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Account/constants.js":"46","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/ApiRequests/account.js":"47","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/AppNotes/constants.js":"48","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Interviews/constants.js":"49","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Job/ApplicationCard/ApplicationInput.js":"50","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Job/ApplicationCard/ApplicationNote.js":"51","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Job/InterviewCard/Interview.js":"52","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Job/JobDetailsCard/JobDetail.js":"53","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/ApiRequests/interviews.js":"54","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/ApiRequests/appNotes.js":"55","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/axios.js":"56"},{"size":382,"mtime":1610625256274,"results":"57","hashOfConfig":"58"},{"size":1426,"mtime":1610625256266,"results":"59","hashOfConfig":"58"},{"size":519,"mtime":1610625256273,"results":"60","hashOfConfig":"58"},{"size":488,"mtime":1610625256270,"results":"61","hashOfConfig":"58"},{"size":299,"mtime":1610625256267,"results":"62","hashOfConfig":"58"},{"size":4057,"mtime":1611851115192,"results":"63","hashOfConfig":"58"},{"size":4090,"mtime":1611851871416,"results":"64","hashOfConfig":"58"},{"size":4190,"mtime":1611851336209,"results":"65","hashOfConfig":"58"},{"size":1721,"mtime":1610625256266,"results":"66","hashOfConfig":"58"},{"size":1972,"mtime":1610625256267,"results":"67","hashOfConfig":"58"},{"size":1933,"mtime":1610625256266,"results":"68","hashOfConfig":"58"},{"size":1787,"mtime":1610625256268,"results":"69","hashOfConfig":"58"},{"size":2427,"mtime":1610625256269,"results":"70","hashOfConfig":"58"},{"size":2572,"mtime":1610625256266,"results":"71","hashOfConfig":"58"},{"size":1878,"mtime":1610625256273,"results":"72","hashOfConfig":"58"},{"size":1683,"mtime":1611851026262,"results":"73","hashOfConfig":"58"},{"size":118,"mtime":1610625256269,"results":"74","hashOfConfig":"58"},{"size":3729,"mtime":1610625256269,"results":"75","hashOfConfig":"58"},{"size":4630,"mtime":1610625256272,"results":"76","hashOfConfig":"58"},{"size":1608,"mtime":1610625256271,"results":"77","hashOfConfig":"58"},{"size":483,"mtime":1610625256266,"results":"78","hashOfConfig":"58"},{"size":1630,"mtime":1610625256266,"results":"79","hashOfConfig":"58"},{"size":3461,"mtime":1610625256272,"results":"80","hashOfConfig":"58"},{"size":3161,"mtime":1610625256273,"results":"81","hashOfConfig":"58"},{"size":5205,"mtime":1610625256273,"results":"82","hashOfConfig":"58"},{"size":9407,"mtime":1610625256269,"results":"83","hashOfConfig":"58"},{"size":2040,"mtime":1610625256271,"results":"84","hashOfConfig":"58"},{"size":1481,"mtime":1610625256271,"results":"85","hashOfConfig":"58"},{"size":3033,"mtime":1610625256272,"results":"86","hashOfConfig":"58"},{"size":2877,"mtime":1610625256273,"results":"87","hashOfConfig":"58"},{"size":299,"mtime":1610625256274,"results":"88","hashOfConfig":"58"},{"size":2991,"mtime":1610625256268,"results":"89","hashOfConfig":"58"},{"size":4733,"mtime":1610625256268,"results":"90","hashOfConfig":"58"},{"size":2534,"mtime":1610625256268,"results":"91","hashOfConfig":"58"},{"size":1125,"mtime":1610625256270,"results":"92","hashOfConfig":"58"},{"size":1176,"mtime":1610625256272,"results":"93","hashOfConfig":"58"},{"size":1011,"mtime":1610625256274,"results":"94","hashOfConfig":"58"},{"size":1081,"mtime":1610625256273,"results":"95","hashOfConfig":"58"},{"size":3320,"mtime":1610625256272,"results":"96","hashOfConfig":"58"},{"size":3213,"mtime":1610625256273,"results":"97","hashOfConfig":"58"},{"size":3071,"mtime":1610625256269,"results":"98","hashOfConfig":"58"},{"size":4744,"mtime":1610625256269,"results":"99","hashOfConfig":"58"},{"size":789,"mtime":1610625256271,"results":"100","hashOfConfig":"58"},{"size":1343,"mtime":1610625256271,"results":"101","hashOfConfig":"58"},{"size":1774,"mtime":1610625256269,"results":"102","hashOfConfig":"58"},{"size":427,"mtime":1610625256271,"results":"103","hashOfConfig":"58"},{"size":540,"mtime":1610625256271,"results":"104","hashOfConfig":"58"},{"size":835,"mtime":1610625256272,"results":"105","hashOfConfig":"58"},{"size":673,"mtime":1610625256273,"results":"106","hashOfConfig":"58"},{"size":2399,"mtime":1610625256267,"results":"107","hashOfConfig":"58"},{"size":2965,"mtime":1610625256267,"results":"108","hashOfConfig":"58"},{"size":4868,"mtime":1610625256268,"results":"109","hashOfConfig":"58"},{"size":4086,"mtime":1610625256268,"results":"110","hashOfConfig":"58"},{"size":995,"mtime":1610625256271,"results":"111","hashOfConfig":"58"},{"size":969,"mtime":1610625256271,"results":"112","hashOfConfig":"58"},{"size":301,"mtime":1610625256273,"results":"113","hashOfConfig":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"3sjalm",{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"116"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"116"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"116"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"116"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"116"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"116"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"116"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"116"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"116"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"116"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"116"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"116"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"116"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"116"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"116"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"116"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/index.js",[],["243","244"],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/App.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/store.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/PrivateRoute.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/FourOhFour.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/AuthForms/SignUp.js",["245","246","247"],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Home.js",["248"],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/AuthForms/Login.js",["249","250"],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/AuthForms/Logout.js",["251"],"import React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { resetAuthResponse, logout } from '../../data/Auth/actions'\nimport checkmark from '../../assets/images/done-24px.svg'\nimport Nav from '../Nav'\n\nconst Logout = () => {\n    const { authResponse } = useSelector(state => state)\n    const access_token = useSelector(state => state.user.access_token)\n\n    const dispatch = useDispatch()\n\n    // resets authResponse global state property every time component renders\n    useEffect(() => {\n        dispatch(resetAuthResponse())\n    }, [])\n\n    const handleClick= e => {\n        dispatch(logout())\n    }\n\n    return (\n        <>\n        {/* requires styling */}\n        <Nav />\n\n        <div className=\"form-container-small logout-container\">\n\n            { access_token ? \n            <>\n                <h1 className=\"logout-prompt center\">Are you sure you want to log out?</h1>\n                <button className=\"primarybtn logout-btn\" type=\"submit\" onClick={handleClick}>\n                    LOG OUT\n                </button>\n                </>\n                :\n                <>\n                <img className=\"check-icon filter-green\" src={checkmark} alt=\"green checkmark\"></img>\n                <h1 className=\"headline center\">Logged Out</h1>\n                <Link to=\"/home/login\"> \n                    <button className=\"primarybtn logout-btn\">\n                        RETURN TO LOGIN\n                    </button>\n                </Link>\n                </>\n                }\n\n            <p className=\"para-highlight center\">{authResponse !== null && authResponse}</p>\n        </div>\n    </>\n    )\n}\n\nexport default Logout","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/AuthForms/PasswordReset.js",["252","253"],"import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { passwordReset } from '../../data/Auth/actions'\nimport { useQueryParam, StringParam } from 'use-query-params'\nimport Nav from '../Nav'\n\nconst PasswordReset = (props) => {\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [lengthWarning, setLengthWarning] = useState(null)\n    const [matchWarning, setMatchWarning] = useState(null)\n    const dispatch = useDispatch()\n\n    // get the email and reset token from the incoming url\n    const [email, setEmail] = useQueryParam('email', StringParam)\n    const [token, setToken] = useQueryParam('token', StringParam)\n\n    const handleSubmit = e => {\n        e.preventDefault()\n\n        if (password.length < 6) {\n            setLengthWarning(\"Password must be at least 6 characters.\")\n        } else if (password !== confirmPassword) {\n            setMatchWarning(\"Passwords must match.\")\n        } else {\n            const data = {\n                email,\n                password,\n                token\n            }\n            dispatch(passwordReset(data))\n        }\n    }\n\n    return (\n        <> <Nav />\n        <form onSubmit={handleSubmit}>\n            <h1>Password Reset</h1>\n            <h3>Please enter your new password (at least 6 characters).</h3>\n            <input\n                type=\"password\"\n                value={password}\n                onChange={e => { setPassword(e.target.value) }}\n            />\n            {lengthWarning !== null && lengthWarning}\n            <h3>Please confirm your new password.</h3>\n            <input\n                type=\"password\"\n                value={confirmPassword}\n                onChange={e => { setConfirmPassword(e.target.value) }}\n            />\n            {matchWarning !== null && matchWarning}\n            <button type=\"submit\">Submit</button>\n        </form> </>\n    )\n}\n\nexport default PasswordReset","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/AuthForms/ForgotPassword.js",["254","255"],"import React, { useEffect } from 'react'\nimport { forgotPasswordInit, resetAuthResponse, resetErrors } from '../../data/Auth/actions'\nimport useFormValidation from '../../customHooks/useFormValidation'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Nav from '../Nav'\n\nconst initialState = {\n    email: \"\"\n}\n\nconst ForgotPassword = () => {\n    // destructuring the properties returned from the custom hook\n    const {\n        handleSubmit,\n        handleChange,\n        values,\n        errors,\n        isSubmitting\n    } = useFormValidation(initialState, forgotPasswordInit)\n\n    const dispatch = useDispatch()\n    // resets authResponse global state property every time component renders\n    useEffect(() => {\n        dispatch(resetAuthResponse())\n    }, [])\n    // resets errors property in global state every time component renders\n    useEffect(() => {\n        dispatch(resetErrors())\n    }, [])\n    \n    const { authResponse } = useSelector(state => state)\n    const { loaded } = useSelector(state => state)\n\n    return (\n        <>\n        <Nav />\n        <div className=\"pass-reset-card\">\n            <form className=\"pass-reset-form\" onSubmit={handleSubmit}>\n                <h2 className=\"para-header center\">Please enter your email, you will then be emailed a link to reset your password.</h2>\n                <input\n                    type=\"email\"\n                    name=\"email\"\n                    value={values.email}\n                    onChange={handleChange}\n                />\n                {errors.email && <p>{errors.email}</p>}\n                <button className=\"primarybtn pass-reset-btn\"\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                >Submit\n                </button>\n                {authResponse !== null && loaded !== false ? <p>{authResponse}</p> : null}\n            </form>\n        </div>\n        </>\n    )\n}\n\nexport default ForgotPassword","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Job/Job.js",["256","257"],"import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { getSingleJob, deleteJob } from '../../data/Jobs/actions'\nimport Loading from '../Loading'\nimport JobDetailsCard from './JobDetailsCard'\nimport ApplicationCard from './ApplicationCard'\nimport InterviewCard from './InterviewCard'\nimport { Link } from \"react-router-dom\"\nimport Nav from '../Nav'\n\nconst Job = ({ match }) => {\n    const { jobs, job, loaded } = useSelector(state => state)\n    const { data: job_data } = job.data\n    const user_id = useSelector(state => state.user_id)\n    const job_id = match.params.id\n    const access_token = useSelector(state => state.access_token)\n    const dispatch = useDispatch()\n\n    // single job is fetched when component renders\n    useEffect(() => {\n        const data = {\n            user_id,\n            job_id,\n            access_token\n        }\n        dispatch(getSingleJob(data));\n    }, []);\n\n    // deletes single job\n    const handleDeleteJob = () => {\n        dispatch(deleteJob({\n            user_id,\n            job_id,\n            access_token\n        }))\n    }\n\n\n    return (\n        <>\n        <Nav />\n        { !loaded ?\n            <> \n            <Loading /> \n            </>\n        : \n        <>\n        <div className=\"single-job-btn-group\">\n            <Link to=\"/mainpage\"><button className=\"secondarybtn back-btn\">Back</button></Link>\n            <button className=\"primarybtn delete-job-btn\" onClick={handleDeleteJob}>Delete Job</button>\n        </div>\n        <div className=\"single-job-container\" >\n            <JobDetailsCard job={job_data} />\n            <ApplicationCard job={job_data} />\n            <InterviewCard job={job_data} />\n        </div>\n        </>\n        }\n        </>\n    )\n}\n\nexport default Job","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/MainPage/MainPage.js",["258"],"import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Modal from 'react-modal'\nimport JobPreview from './JobPreview'\nimport JobForms from '../JobForms/JobForms'\nimport { getJobs } from '../../data/Jobs/actions'\nimport Nav from '../Nav'\n\nconst MainPage = () => {\n    const [showModal, setOpen] = useState(false)\n    // we are destructuring the user's access token (bearer token) and their id from global state, so when this component loads they can be used in the get request for the user's jobs\n    const { jobs, user: { access_token }, user_id } = useSelector(state => state)\n    const dispatch = useDispatch()\n\n    // opens job form modal\n    const openModal = () => {\n        setOpen(true)\n    }\n\n    // closes jobs form modal\n    const closeModal = () => {\n        setOpen(false)\n    }\n\n    // when component mounts, send an object with the user's access token and id to the action\n    useEffect(() => { // (ie componentdidmount)\n        const data = {\n            access_token,\n            user_id\n        }\n        dispatch(getJobs(data));\n    }, []);\n\n    // Calculate the size of the client's window on component load\n    let width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n    let smallScreen = false;\n\n    if (width < 768) {\n        smallScreen = true;\n    }\n\n    return (\n        <>\n        <Nav/>\n        \n            <div className={ !smallScreen ? \"mainpage-header-container\" : \"mainpage-header-container-small\"}>\n            {smallScreen ? <h1 className=\"mainpage-header-text-small\">My Applications</h1> : null }\n                <div className=\"mainpage-buttons\">\n                <button className=\"tertiarybtn sort-btn\">Sort by &#9662;</button>\n                <button className=\"primarybtn addapp-btn\" onClick={openModal}>+ Add application</button>\n                </div>\n            {!smallScreen ? <h1 className=\"mainpage-header-text\">My Applications</h1> : null }\n\n            </div>\n\n            <div>\n                {jobs.map((job, index) => (\n                    job.active && <JobPreview job={job} key={index} />\n                ))}\n            </div>\n            <Modal\n                isOpen={showModal}\n                onClose={closeModal}\n                onRequestClose={closeModal}\n            >\n                <JobForms />\n            </Modal>\n        </>\n    )\n}\n\nexport default MainPage","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Account/Account.js",["259","260"],"import React, { useEffect } from 'react'\nimport AccountHeader from './AccountHeader'\nimport AccountDetail from './AccountDetail'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { deleteAccount } from '../../data/Account/actions'\nimport { resetAuthResponse } from '../../data/Auth/actions'\nimport checkmark from '../../assets/images/done-24px.svg'\nimport Nav from '../Nav'\n\nconst Account = ( data ) => {\n    const { user_id, access_token, loaded, name, email } = useSelector(state => state)\n    const errors = useSelector(state => state.errors)\n\n    const dispatch = useDispatch()\n\n    // resets authResponse global state property every time component renders\n    useEffect(() => {\n        dispatch(resetAuthResponse())\n    }, [])\n\n    // disptaches action to delete user's account\n    const handleDeleteAccount = () => {\n        dispatch(deleteAccount({ user_id, access_token }))\n    }\n\n    return (\n        <>\n        { access_token ? \n        <>\n        <Nav />\n        <div className=\"account-header\">\n            <Link to=\"/mainpage\">\n                <button className=\"secondarybtn home-btn\">HOME</button>\n            </Link>\n            <h1 className=\"headline\">My Account</h1>\n        </div>\n            <AccountHeader />\n            <p>{ errors.message }</p>\n            <div className=\"account-container\">\n                <AccountDetail\n                    accountDetailName=\"name\"\n                    value={ name }\n                />\n                <AccountDetail\n                    accountDetailName=\"email\"\n                    value={ email }\n                />\n               <div className=\"account-detail-card\">\n                    <Link style={{margin: \"auto\"}} to=\"/forgot-password\"><button className=\"primarybtn reset-pass-btn\">RESET PASSWORD</button>\n                    </Link> \n                </div>\n                <div className=\"account-detail-card\">\n                    <button style={{margin: \"auto\"}}className=\"primarybtn del-acc-btn\" onClick={handleDeleteAccount}>DELETE MY ACCOUNT</button>\n                </div>\n                \n            </div>\n        \n\n        </>\n        :  \n        <>\n            <img className=\"check-icon filter-green\" src={checkmark} alt=\"green checkmark\"></img>\n            <h1 className=\"headline\">Account Deleted</h1>\n            <Link to=\"/home\"> \n                <button className=\"primarybtn\">\n                    RETURN HOME\n                </button>\n            </Link>\n            </>\n        }\n        \n        </>\n    )\n}\n\nexport default Account","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/RootReducer.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Nav.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Loading.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/MainPage/JobPreview.js",["261"],"import React, { useState } from 'react'\nimport { Link } from \"react-router-dom\"\nimport StageTracker from './StageTracker'\n\nconst JobPreview = ({ job }) => {\n    \n    const {\n        title,\n        company,\n        active,\n        stage,\n    } = job\n\n    // Calculate the size of the client's window on component load\n    let width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n    let smallScreen = false;\n\n    if (width < 768) {\n        smallScreen = true;\n    }\n\n    const [current, setCurrent] = useState(stage)\n\n    return (\n        <>\n            <div className=  {!smallScreen ? \"job-card-container\" : \"job-card-container-small\"}>\n\n                { smallScreen ?                     \n   \n                <div className=\"job-card-text-small\">\n                    <p className=\"job-card-text-bold\">{job.title}</p><p className=\"job-card-at\"> at</p><p className=\"job-card-text-bold\">{job.company}</p>\n                </div>\n                :\n                null }\n\n            <div className={smallScreen ? \"job-card-flex-container-small\" : \"job-card-flex-container\" }>\n\n                { !smallScreen ? \n                <div className=\"job-card-text\">\n                        <h4 className=\"para-highlight\">\n                            {job.title}\n                        </h4>\n                        <h4 className=\"para-header\">\n                            {job.company}\n                        </h4>\n                    </div>\n                : null }\n                \n                <div className=\"status-bar-container\">\n                    <div className=\"status-bar\">\n                        <StageTracker\n                            handleClick={() => setCurrent(\"1\")}\n                            selected={current === \"1\"}\n                            label=\"Not applied\"\n                            value=\"1\"\n                            title={title}\n                            company={company}\n                            active={active}\n                            job_id={job.id}\n                        />\n                        <StageTracker\n                            handleClick={() => setCurrent(\"2\")}\n                            selected={current === \"2\"}\n                            label=\"Applied\"\n                            value=\"2\"\n                            title={title}\n                            company={company}\n                            active={active}\n                            job_id={job.id}\n                        />\n                        <StageTracker\n                            handleClick={() => setCurrent(\"3\")}\n                            selected={current === \"3\"}\n                            label=\"Interview\"\n                            value=\"3\"\n                            title={title}\n                            company={company}\n                            active={active}\n                            job_id={job.id}\n                        />\n                        <StageTracker\n                            handleClick={() => setCurrent(\"4\")}\n                            selected={current === \"4\"}\n                            label=\"Offer\"\n                            value=\"4\"\n                            title={title}\n                            company={company}\n                            active={active}\n                            job_id={job.id}\n                        />\n                    </div>\n                </div>\n                <Link to={`/jobs/${job.id}`}><img className=\"expand-job-btn\" src={ require('../../assets/images/arrow_right.svg') }/></Link>\n            </div>\n            </div>\n            {/* <hr className=\"status-line\"></hr> */}\n        </>\n    );\n};\n\nexport default JobPreview;","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Auth/actions.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/customHooks/useFormValidation.js",["262"],"import { useState, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { default as validate } from '../helpers/validateAuth'\n\nconst useFormValidation = (initialState, authAction, history) => {\n    const [values, setValues] = useState(initialState)\n    const [errors, setErrors] = useState({})\n    const [isSubmitting, setSubmitting] = useState(false)\n    const dispatch = useDispatch()\n\n    // when the errors state prop is updated, code is run\n    useEffect(() => {\n        if (isSubmitting) {\n            const noErrors = Object.keys(errors).length === 0\n            // signup or login action is only dispatched if there are no errors in form\n            if (noErrors) {\n                dispatch(authAction(values, history))\n                setSubmitting(false)\n            } else {\n                setSubmitting(false)\n            }\n        }\n    }, [errors])\n\n    const handleChange = e => {\n        setValues({\n            ...values,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        // credentials are passed into validate helper function, returns an error object\n        const validationErrors = validate(values)\n        // errors state prop is updated, invoking the above useEffect()\n        setErrors(validationErrors)\n        // submitting is set to true, disabling the submit button so user can't throttle it\n        setSubmitting(true)\n    }\n\n    return {\n        handleSubmit,\n        handleChange,\n        values,\n        errors,\n        isSubmitting\n    }\n}\n\nexport default useFormValidation","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Account/AccountHeader.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Account/AccountDetail.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Auth/reducer.js",["263"],"import {\n    RESET_AUTH_RESPONSE,\n    RESET_ERRORS,\n    SIGNUP_POST_REQUEST,\n    SIGNUP_POST_SUCCESS,\n    SIGNUP_POST_FAILURE,\n    LOGIN_POST_REQUEST,\n    LOGIN_POST_SUCCESS,\n    LOGIN_POST_FAILURE,\n    FORGOT_PASSWORD_INIT_POST_REQUEST,\n    FORGOT_PASSWORD_INIT_POST_SUCCESS,\n    FORGOT_PASSWORD_INIT_POST_FAILURE,\n    PASSWORD_RESET_POST_REQUEST,\n    PASSWORD_RESET_POST_SUCCESS,\n    PASSWORD_RESET_POST_FAILURE,\n    LOGOUT\n} from './constants'\nimport { initialState } from '../RootReducer'\n\nexport default (state, action) => {\n    const { type, payload } = action\n    switch (type) {\n        case RESET_ERRORS:\n            return {\n                ...state,\n                errors: {}\n            }\n        case RESET_AUTH_RESPONSE:\n            return {\n                ...state,\n                authResponse: null,\n                errors: {}\n            }\n        case SIGNUP_POST_REQUEST:\n            return {\n                ...state,\n                authResponse: 'Loading...',\n            }\n        case SIGNUP_POST_SUCCESS:\n            const access_token = payload.data.success.token\n            return {\n                ...state,\n                authResponse: 'Signup successful! Logging in...',\n                user: { ...payload.data.user, access_token },\n                user_id: payload.data.user.id,\n                name: payload.data.user.name,\n                email: payload.data.user.email,\n                access_token: access_token\n            }\n        case SIGNUP_POST_FAILURE:\n            return {\n                ...state,\n                errors: payload,\n            }\n        case LOGIN_POST_REQUEST:\n            return {\n                ...state,\n                authResponse: 'Loading...'\n            }\n        case LOGIN_POST_SUCCESS:\n            return {\n                ...state,\n                authResponse: 'Redirecting you to dashboard...',\n                user: payload,\n                user_id: payload.user.id,\n                name: payload.user.name,\n                email: payload.user.email,\n                access_token: payload.access_token\n     \n            }\n        case LOGIN_POST_FAILURE:\n            return {\n                ...state,\n                errors: payload,\n                authResponse: payload.message\n            }\n        case FORGOT_PASSWORD_INIT_POST_REQUEST:\n            return {\n                ...state,\n                authResponse: 'Loading...'\n            }\n        case FORGOT_PASSWORD_INIT_POST_SUCCESS:\n            return {\n                ...state,\n                authResponse: 'Password reset request successful. Please check your email.'\n            }\n        case FORGOT_PASSWORD_INIT_POST_FAILURE:\n            return {\n                ...state,\n                errors: payload\n            }\n        case PASSWORD_RESET_POST_REQUEST:\n            return {\n                ...state,\n                loaded: false\n            }\n        case PASSWORD_RESET_POST_SUCCESS:\n            return {\n                ...state,\n                user: { ...payload },\n                loaded: true\n            }\n        case PASSWORD_RESET_POST_FAILURE:\n            return {\n                ...state,\n                errors: payload,\n                loaded: true\n            }\n        case LOGOUT:\n            return {\n                ...initialState,\n                authResponse: 'Successfully logged out',\n                loaded: true,\n            }\n        default:\n            return {}\n    }\n}","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Jobs/reducer.js",["264"],"import {\n    JOBS_GET_REQUEST,\n    JOBS_GET_SUCCESS,\n    JOBS_GET_FAILURE,\n    SINGLE_JOB_GET_REQUEST,\n    SINGLE_JOB_GET_SUCCESS,\n    SINGLE_JOB_GET_FAILURE,\n    SINGLE_JOB_POST_REQUEST,\n    SINGLE_JOB_POST_SUCCESS,\n    SINGLE_JOB_POST_FAILURE,\n    SINGLE_JOB_PATCH_REQUEST,\n    SINGLE_JOB_PATCH_SUCCESS,\n    SINGLE_JOB_PATCH_FAILURE,\n    SINGLE_JOB_DELETE_REQUEST,\n    SINGLE_JOB_DELETE_SUCCESS,\n    SINGLE_JOB_DELETE_FAILURE\n} from './constants'\nimport { initialState } from '../RootReducer'\n\nexport default (state, action) => {\n    const { type, payload } = action\n    switch (type) {\n        case JOBS_GET_REQUEST:\n            return {\n                ...state,\n                loaded: false\n            }\n        case JOBS_GET_SUCCESS:\n            return {\n                ...state,\n                jobs: [...payload],\n                loaded: true\n            }\n        case JOBS_GET_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        case SINGLE_JOB_GET_REQUEST:\n            return {\n                ...state,\n                loaded: false\n            }\n        case SINGLE_JOB_GET_SUCCESS:\n            return {\n                ...state,\n                job: {\n                    ...payload\n                },\n                loaded: true\n            }\n        case SINGLE_JOB_GET_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        case SINGLE_JOB_POST_REQUEST:\n            return {\n                ...state,\n                loaded: false,\n                job_id: \"\",\n            }\n        case SINGLE_JOB_POST_SUCCESS:\n            return {\n                ...state,\n                jobs: [\n                    ...state.jobs,\n                    payload.data.data\n                ],\n                job_id: payload.data.data.id,\n                loaded: true\n            }\n        case SINGLE_JOB_POST_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        case SINGLE_JOB_PATCH_REQUEST:\n            return {\n                ...state,\n                loaded: false\n            }\n        case SINGLE_JOB_PATCH_SUCCESS:\n            return {\n                ...state,\n                job: { ...payload },\n                loaded: true\n            }\n        case SINGLE_JOB_PATCH_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        case SINGLE_JOB_DELETE_REQUEST:\n            return {\n                ...state,\n                loaded: false\n            }\n        case SINGLE_JOB_DELETE_SUCCESS:\n            return {\n                ...state,\n                jobs: state.jobs.filter(job => job.id !== payload),\n                job: { ...initialState.job },\n                loaded: true\n            }\n        case SINGLE_JOB_DELETE_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        default:\n            return {}\n    }\n}","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Jobs/actions.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/JobForms/JobForms.js",["265"],"import React, { useReducer } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { addJob, updateJob } from '../../data/Jobs/actions'\nimport { addAppNote } from '../../data/AppNotes/actions'\nimport { addInterview } from '../../data/Interviews/actions'\nimport dateToday from '../../helpers/dateToday.js'\nimport JobDetailsForm from './JobDetailsForm'\nimport ApplicationDetailsForm from './ApplicationDetailsForm'\nimport InterviewDetailsForm from './InterviewDetailsForm'\n\n// local reducer that handles updating local state properties (initialised in the initialState variable below)\nconst jobFormReducer = (state, action) => {\n    switch (action.type) {\n        // for values within the job object\n        case 'JOB_FIELD_CHANGE':\n            return {\n                ...state,\n                job: {\n                    ...state.job,\n                    [action.payload.fieldName]: action.payload.value\n                }\n            }\n        // for values within the interview object\n        case 'INTERVIEW_FIELD_CHANGE':\n            return {\n                ...state,\n                interview : {\n                    ...state.interview,\n                    [action.payload.fieldName]: action.payload.value\n                }\n            }\n        // specifically for the interview.format value    \n        case 'INTERVIEW_FORMAT_CHANGE':\n            return {\n                ...state,\n                interview : {\n                    ...state.interview,\n                    format: action.payload\n                }\n            }\n        // for values within the application_notes object\n        case 'APPLICATION_FIELD_CHANGE':\n            return {\n                ...state,\n                application_notes : {\n                    ...state.application_notes,\n                    [action.payload.fieldName]: action.payload.value\n                }\n            }\n        case 'NEXT_STEP':\n            return {\n                ...state,\n                step: state.step + 1\n            }\n        case 'PREVIOUS_STEP':\n            return {\n                ...state,\n                step: state.step - 1\n            }\n        case 'RESET_FORM':\n            return {\n                ...initialState,\n            }\n        default: return;\n    }\n}\n\n// calculate today's date for application_notes\nlet today = dateToday()\n\n// initial state of component\nconst initialState = {\n    job: {\n        title: \"\",\n        company: \"\",\n        description: \"\",\n        salary: 0,\n        location: \"\",\n        date_applied: \"\",\n        closing_date: \"\",\n        cv: \"\",\n        cover_letter: \"\",\n        active: \"1\",\n        stage: \"1\"\n    },\n    interview : {\n        interview_date: \"\",\n        format: \"in_person\",\n        interviewer: \"\",\n        notes: \"\"\n    },\n    application_notes : {\n        date: today,\n        data: \"\"\n    },\n    step: 1\n}\n\nconst JobForm = () => {\n    const [state, dispatch] = useReducer(jobFormReducer, initialState)\n    const dispatchAction = useDispatch()\n    const user_id = useSelector(state => state.user_id)\n    const job_id = useSelector(state => state.job_id)\n    const access_token = useSelector(state => state.user.access_token)\n    const {\n        job: {\n            title,\n            company,\n            description,\n            salary,\n            location,\n            date_applied,\n            closing_date,\n            cv,\n            cover_letter,\n            active,\n            stage\n        },\n        interview : {\n            interview_date,\n            format,\n            interviewer,\n            notes\n        },\n        application_notes : {\n            date,\n            data\n        },\n        step\n    } = state\n\n    // form fields for first step\n    const firstFormValues = {\n        title,\n        company,\n        description,\n        salary,\n        location,\n        date_applied,\n        closing_date\n    }\n\n    // form fields for second step\n    const secondFormValues = {\n        cv,\n        cover_letter,\n        data\n    }\n\n    // form fields for third step\n    const thirdFormValues = {\n        interview_date,\n        format,\n        interviewer,\n        notes\n    }\n\n    // proceed to next step\n    const nextStep = () => {\n        dispatch({ type: \"NEXT_STEP\" })\n    };\n\n    // go back to prev step\n    const prevStep = () => {\n        dispatch({ type: \"PREVIOUS_STEP\" })\n    };\n\n    // handles changing input field\n    const handleJobChange = e => {\n        dispatch({\n            type: 'JOB_FIELD_CHANGE',\n            payload: {\n                fieldName: e.target.id,\n                value: e.target.value\n            }\n        })\n    }\n\n    const handleAppChange = e => {\n        dispatch({\n            type: 'APPLICATION_FIELD_CHANGE',\n            payload: {\n                fieldName: e.target.id,\n                value: e.target.value\n            }\n        })\n    }\n\n    const handleInterviewChange = e => {\n        dispatch({\n            type: 'INTERVIEW_FIELD_CHANGE',\n            payload: {\n                fieldName: e.target.id,\n                value: e.target.value\n            }\n        })\n    }\n\n    // handles changing the interview format in the interview details component\n    const handleInterviewFormat = e => {\n        dispatch({\n            type: 'INTERVIEW_FORMAT_CHANGE',\n            payload: e.target.value\n        })\n    }\n\n    // Form must submit twice: the job_id is returned after the first submission (POST user/${user_id}/jobs) and is required in the URL of the second submission (POST user/${user_id}/jobs/${job_id}/interviews & POST user/${user_id}/jobs/${job_id}/app-notes)\n    const handleFirstSubmit = e => {\n        e.preventDefault()\n\n\n        // assigns the job object in state to data variable\n        const job_data = { ...state.job }\n\n\n        // dispatches job_data to API (POST user/${user_id}/jobs)\n        // job_id is returned and stored in global state\n        dispatchAction(addJob({\n            user_id,\n            access_token,\n            job_data: job_data,\n        }))\n\n    }\n\n    // Second submission now that job_id has been returned from API\n    const handleSecondSubmit = e => {\n        e.preventDefault()\n\n        // assigns the invterview and notes objects in state to data variables\n        const interview_data = { ...state.interview }\n        const notes_data = { ...state.application_notes }\n        const job_data = { ...state.job }\n\n        // will only POST if app notes data exists\n        if (notes_data.data !== \"\") {\n            // dispatches notes_data to API (POST user/${user_id}/jobs/${job_id}/app-notes)\n            dispatchAction(addAppNote({\n                user_id,\n                job_id,\n                access_token,\n                notes_data: notes_data,\n            }))\n        }\n\n        // will only POST if an interview date has been selected\n        if (interview_data.interview_date !== \"\") {\n            // dispatches interview_data to API (POST user/${user_id}/jobs/${job_id}/interviews)\n            dispatchAction(addInterview({\n                user_id,\n                job_id,\n                access_token,\n                interview_data: interview_data,\n            }))\n        }\n\n        let form_data = {}\n\n        // if the cv field is left blank, exclude it from the PATCH request\n        if (job_data.cv === \"\" && job_data.cover_letter !== \"\") {\n            form_data = { title, company, active, stage, cover_letter }\n        }\n        // if the cover_letter field is left blank, exclude it from the PATCH request\n        else if (job_data.cv !== \"\" && job_data.cover_letter === \"\") {\n            form_data = { title, company, active, stage, cv }\n        }\n        // otherwise, send both\n        else {\n            form_data = { title, company, active, stage, cv, cover_letter }\n        }\n\n        // will not PATCH if both the cv or cover letter are left blank\n        if (job_data.cv !== \"\" || job_data.cover_letter !== \"\")  {\n            // dispatches job_data to API (PATCH user/${user_id}/jobs/${job_id})\n            dispatchAction(updateJob({\n                user_id,\n                job_id,\n                access_token,\n                job_data: { ...form_data }\n            }))\n        }\n\n        // resets form fields\n        dispatch({ type: 'RESET_FORM' })\n    }\n    return (\n        <>\n        <form onSubmit={handleFirstSubmit}>\n            <JobDetailsForm\n                currentStep={step === 1}\n                nextStep={nextStep}\n                handleFirstSubmit={handleFirstSubmit}\n                handleJobChange={handleJobChange}\n                values={firstFormValues}\n            />\n        </form>\n        <form onSubmit={handleSecondSubmit}>\n            <ApplicationDetailsForm\n                currentStep={step === 2}\n                nextStep={nextStep}\n                prevStep={prevStep}\n                handleJobChange={handleJobChange}\n                handleAppChange={handleAppChange}\n                values={secondFormValues}\n            />\n            <InterviewDetailsForm\n                currentStep={step === 3}\n                nextStep={nextStep}\n                prevStep={prevStep}\n                handleSecondSubmit={handleSecondSubmit}\n                handleInterviewChange={handleInterviewChange}\n                handleInterviewFormat={handleInterviewFormat}\n                values={thirdFormValues}\n            />\n        </form>\n        </>\n    )\n}\n\nexport default JobForm;","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Account/actions.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Account/reducer.js",["266"],"import {\n    ACCOUNT_PATCH_REQUEST,\n    ACCOUNT_PATCH_SUCCESS,\n    ACCOUNT_PATCH_FAILURE,\n    ACCOUNT_DELETE_REQUEST,\n    ACCOUNT_DELETE_SUCCESS,\n    ACCOUNT_DELETE_FAILURE\n} from './constants'\n\nexport default (state, action) => {\n    const { type, payload } = action\n    switch (type) {\n        case ACCOUNT_PATCH_REQUEST:\n            return {\n                ...state,\n                errors: {},\n                loaded: false,\n            }\n        case ACCOUNT_PATCH_SUCCESS:\n            return {\n                ...state,\n                loaded: true,\n                name: payload.data.user.name,\n                email: payload.data.user.email,\n            }\n        case ACCOUNT_PATCH_FAILURE:\n            return {\n                ...state,\n                errors: payload,\n                loaded: true,\n\n            }\n        case ACCOUNT_DELETE_REQUEST:\n            return {\n                ...state,\n                errors: {},\n                loaded: false\n            }\n        case ACCOUNT_DELETE_SUCCESS:\n            return {\n                ...state,\n                user: \"\",\n                name: \"\",\n                authResponse: \"Account Deleted!\",\n                user_id: \"\",\n                access_token: \"\", \n                loaded: true\n            }\n        case ACCOUNT_DELETE_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        default:\n            return {}\n    }\n}","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/AppNotes/reducer.js",["267"],"import {\n    APPLICATION_NOTE_POST_REQUEST,\n    APPLICATION_NOTE_POST_SUCCESS,\n    APPLICATION_NOTE_POST_FAILURE,\n    APPLICATION_NOTE_PATCH_REQUEST,\n    APPLICATION_NOTE_PATCH_SUCCESS,\n    APPLICATION_NOTE_PATCH_FAILURE,\n    APPLICATION_NOTE_DELETE_REQUEST,\n    APPLICATION_NOTE_DELETE_SUCCESS,\n    APPLICATION_NOTE_DELETE_FAILURE\n} from './constants'\n\nexport default (state, action) => {\n    const { type, payload } = action\n    switch (type) {\n        case APPLICATION_NOTE_POST_REQUEST:\n            return {\n                ...state,\n                loaded: false\n            }\n        case APPLICATION_NOTE_POST_SUCCESS:\n            return {\n                ...state,\n                job: {\n                    ...state.job,\n                    data: {\n                        ...state.job.data,\n                        data: {\n                            ...state.job.data.data,\n                            application_notes: [...state.job.data.data.application_notes, payload]\n                        }\n                        \n                    },\n                },\n                loaded: true\n            }\n        case APPLICATION_NOTE_POST_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        case APPLICATION_NOTE_PATCH_REQUEST:\n            return {\n                ...state,\n                loaded: false\n            }\n        case APPLICATION_NOTE_PATCH_SUCCESS:\n            return {\n                ...state,\n                job: {\n                    ...state.job,\n                    data: {\n                        ...state.job.data,\n                        data: {\n                            ...state.job.data.data,\n                            application_notes: state.job.data.data.application_notes.map(note => note.id === payload.id ? payload : note)\n                        }\n                    },\n                },\n                loaded: true\n            }\n        case APPLICATION_NOTE_PATCH_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        case APPLICATION_NOTE_DELETE_REQUEST:\n            return {\n                ...state,\n                loaded: false\n            }\n        case APPLICATION_NOTE_DELETE_SUCCESS:\n            return {\n                ...state,\n                job: {\n                    ...state.job,\n                    data: {\n                        ...state.job.data,\n                        data: {\n                            ...state.job.data.data,\n                            application_notes: state.job.data.data.application_notes.filter(note => note.id !== payload)\n                        }\n                    },\n                },\n                loaded: true\n            }\n        case APPLICATION_NOTE_DELETE_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        default:\n            return {}\n    }\n}","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Interviews/reducer.js",["268"],"import {\n    INTERVIEW_POST_REQUEST,\n    INTERVIEW_POST_SUCCESS,\n    INTERVIEW_POST_FAILURE,\n    INTERVIEW_PATCH_REQUEST,\n    INTERVIEW_PATCH_SUCCESS,\n    INTERVIEW_PATCH_FAILURE,\n    INTERVIEW_DELETE_REQUEST,\n    INTERVIEW_DELETE_SUCCESS,\n    INTERVIEW_DELETE_FAILURE\n} from './constants'\n\nexport default (state, action) => {\n    const { type, payload } = action\n    switch (type) {\n        case INTERVIEW_POST_REQUEST:\n            return {\n                ...state,\n                loaded: false\n            }\n        case INTERVIEW_POST_SUCCESS:\n            return {\n                ...state,\n                job: {\n                    ...state.job,\n                    data: {\n                        ...state.job.data,\n                        data: {\n                            ...state.job.data.data,\n                            interviews: [...state.job.data.data.interviews, payload.data.data]\n                        }\n                    },\n                },\n                loaded: true\n            }\n        case INTERVIEW_POST_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        case INTERVIEW_PATCH_REQUEST:\n            return {\n                ...state,\n                loaded: false\n            }\n        case INTERVIEW_PATCH_SUCCESS:\n            return {\n                ...state,\n                job: {\n                    ...state.job,\n                    data: {\n                        ...state.job.data,\n                        data: {\n                            ...state.job.data.data,\n                            interviews: state.job.data.data.interviews.map(interview => interview.id === payload.id ? payload : interview)\n                        }\n                    },\n\n                },\n                loaded: true\n            }\n        case INTERVIEW_PATCH_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        case INTERVIEW_DELETE_REQUEST:\n            return {\n                ...state,\n                loaded: false\n            }\n        case INTERVIEW_DELETE_SUCCESS:\n            return {\n                ...state,\n                job: {\n                    ...state.job,\n                    data: {\n                        ...state.job.data,\n                        data: {\n                            ...state.job.data.data,\n                            interviews: state.job.data.data.interviews.filter(interview => interview.id !== payload)\n                        },\n                    },\n                },\n                loaded: true\n            }\n        case INTERVIEW_DELETE_FAILURE:\n            return {\n                ...state,\n                loaded: true,\n                errors: payload\n            }\n        default:\n            return {}\n    }\n}","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/helpers/dateToday.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Job/ApplicationCard/index.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Job/InterviewCard/index.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Job/JobDetailsCard/index.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/MainPage/StageTracker.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Auth/constants.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/helpers/validateAuth.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Jobs/constants.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/AppNotes/actions.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Interviews/actions.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/JobForms/InterviewDetailsForm.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/JobForms/JobDetailsForm.js",["269"],"import React from 'react'\n\nconst JobDetailsForm = ({\n    currentStep,\n    nextStep,\n    values,\n    handleJobChange,\n    handleFirstSubmit\n}) => {\n    return currentStep && (\n        <>\n            <img className=\"close-icon filter-red\" src={ require('../../assets/images/close.svg')} alt=\"close form\"/>\n            <h1 className=\"addjob-form-headerjob\">Step 1: <span style={{ fontFamily: \"LatoLight\"}}>Job Details</span></h1>\n            <p>Here you can add details of the job you are applying for.</p>\n            <form className=\"addjob-form\" onSubmit={handleFirstSubmit, nextStep}>\n                <div className=\"form-input-group addjob-input-group addjob-input-jobtitle\">\n                    <label\n                        className=\"label\"\n                        htmlFor=\"title\"\n                    >Job Title\n                    </label>\n                    <input\n                        placeholder=\"Job Title\"\n                        type=\"text\"\n                        id=\"title\"\n                        value={values.title}\n                        onChange={handleJobChange}\n                        required\n                    />\n                </div>\n\n                <div className=\"form-input-group addjob-input-group addjob-input-company\">\n                    <label\n                        className=\"label\"\n                        htmlFor=\"company\"\n                    >Company\n                        </label>\n                    <input\n                        placeholder=\"Company\"\n                        type=\"text\"\n                        id=\"company\"\n                        value={values.company}\n                        onChange={handleJobChange}\n                        required\n                    />\n                </div>\n\n                <div className=\"form-input-group addjob-input-group addjob-input-salary\">\n                    <label\n                        className=\"label mr-1\"\n                        htmlFor=\"salary\"\n                    >Salary p/a\n                    </label>\n                    <input\n                        type=\"number\"\n                        id=\"salary\"\n                        value={values.salary}\n                        onChange={handleJobChange}\n                    />\n                </div>\n\n                <div className=\"form-input-group addjob-input-group addjob-input-location\">\n                    <label\n                        className=\"label\"\n                        htmlFor=\"location\"\n                    >Location\n                    </label>\n                    <input\n                        placeholder=\"City\"\n                        type=\"text\"\n                        id=\"location\"\n                        value={values.location}\n                        onChange={handleJobChange}\n                    />\n                </div >\n\n                <div className=\"form-input-group addjob-input-group addjob-input-appdate\">\n                    <label\n                        className=\"label mr-1\"\n                        htmlFor=\"date_applied\"\n                    >Date Applied\n                    </label>\n                    <input\n                        type=\"date\"\n                        id=\"date_applied\"\n                        value={values.date_applied}\n                        onChange={handleJobChange}\n                    />\n                </div >\n\n                <div className=\"form-input-group addjob-input-group addjob-input-closedate\">\n                    <label\n                        className=\"label mr-1\"\n                        htmlFor=\"closing_date\"\n                    >Closing Date\n                    </label>\n                    <input\n                        type=\"date\"\n                        id=\"closing_date\"\n                        value={values.closing_date}\n                        onChange={handleJobChange}\n                    />\n                </div >\n\n                <div className=\"form-input-group addjob-input-group addjob-input-jobdescription\">\n                    <label\n                        className=\"label\"\n                        htmlFor=\"description\"\n                    >Job Description\n                    </label>\n                    <input\n                        placeholder=\"Job Description\"\n                        type=\"text\"\n                        id=\"description\"\n                        value={values.description}\n                        onChange={handleJobChange}\n                    />\n                </div>\n                <button className=\"next-step-btn\" type=\"submit\">Next Step<img className=\"arrow-icon filter-blue\" src={ require('../../assets/images/arrow_right.svg')} alt=\"next step\"></img></button>\n            </form>\n\n        </>\n    );\n};\n\nexport default JobDetailsForm;","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/ApiRequests/auth.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/ApiRequests/jobs.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/JobForms/ApplicationDetailsForm.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Account/constants.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/ApiRequests/account.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/AppNotes/constants.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/Interviews/constants.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Job/ApplicationCard/ApplicationInput.js",["270"],"import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { updateJob } from '../../../data/Jobs/actions'\nimport trash from '../../../assets/images/delete.svg'\nimport edit from '../../../assets/images/edit.svg'\n\nconst ApplicationInput = ({ appCardInput, jobProperty, title, company, active, stage }) => {\n    const [inputValue, setInput] = useState(appCardInput)\n    const [editing, setEditing] = useState(false)\n    const job_id = useSelector(state => state.job.data.data.id)\n    const user_id = useSelector(state => state.user_id)\n    const access_token = useSelector(state => state.access_token)\n    const dispatch = useDispatch()\n\n    // dispatches action with updated cv or cover letter\n    const handleUpdateJob = () => {\n        const data = {\n            user_id,\n            job_id,\n            job_data: {\n                [jobProperty]: inputValue,\n                title,\n                company,\n                active,\n                stage\n            },\n            access_token\n        }\n        dispatch(updateJob(data))\n        setEditing(false)\n    }\n\n    return (\n        <>\n            <label className=\"label\" htmlFor={jobProperty}>\n                {jobProperty === \"cv\"\n                    ?\n                    \"CV\"\n                    :\n                    \"Cover Letter\"\n                }\n            </label>\n            <div className=\"single-job-input-group\">\n            {editing\n                ?\n                <input\n                    type=\"text\"\n                    id={jobProperty}\n                    value={inputValue}\n                    className=\"single-job-input\"\n                    onChange={e => setInput(e.target.value)}\n                />\n                :\n                <p>\n                    {inputValue === null\n                        ?\n                        \"-\"\n                        :\n                        inputValue\n                    }\n                </p>\n            }\n            {editing\n                ?\n                <button className=\"secondarybtn save-btn\" onClick={handleUpdateJob}>Save</button>\n                :\n                <button className=\"primarybtn edit-btn\" onClick={() => setEditing(true)}><img className=\"edit-icon filter-white\" src={edit} alt=\"edit interview\"></img></button>\n            }\n            </div>\n        </>\n    )\n}\n\nexport default ApplicationInput","/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Job/ApplicationCard/ApplicationNote.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Job/InterviewCard/Interview.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/components/Job/JobDetailsCard/JobDetail.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/ApiRequests/interviews.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/ApiRequests/appNotes.js",[],"/Users/study/Documents/DevelopMe/bagajob/bagajob/src/data/axios.js",[],{"ruleId":"271","replacedBy":"272"},{"ruleId":"273","replacedBy":"274"},{"ruleId":"275","severity":1,"message":"276","line":6,"column":8,"nodeType":"277","messageId":"278","endLine":6,"endColumn":11},{"ruleId":"279","severity":1,"message":"280","line":35,"column":8,"nodeType":"281","endLine":35,"endColumn":10,"suggestions":"282"},{"ruleId":"279","severity":1,"message":"280","line":40,"column":8,"nodeType":"281","endLine":40,"endColumn":10,"suggestions":"283"},{"ruleId":"275","severity":1,"message":"276","line":3,"column":8,"nodeType":"277","messageId":"278","endLine":3,"endColumn":11},{"ruleId":"275","severity":1,"message":"276","line":8,"column":8,"nodeType":"277","messageId":"278","endLine":8,"endColumn":11},{"ruleId":"279","severity":1,"message":"280","line":32,"column":8,"nodeType":"281","endLine":32,"endColumn":10,"suggestions":"284"},{"ruleId":"279","severity":1,"message":"280","line":17,"column":8,"nodeType":"281","endLine":17,"endColumn":10,"suggestions":"285"},{"ruleId":"275","severity":1,"message":"286","line":15,"column":19,"nodeType":"277","messageId":"278","endLine":15,"endColumn":27},{"ruleId":"275","severity":1,"message":"287","line":16,"column":19,"nodeType":"277","messageId":"278","endLine":16,"endColumn":27},{"ruleId":"279","severity":1,"message":"280","line":25,"column":8,"nodeType":"281","endLine":25,"endColumn":10,"suggestions":"288"},{"ruleId":"279","severity":1,"message":"280","line":29,"column":8,"nodeType":"281","endLine":29,"endColumn":10,"suggestions":"289"},{"ruleId":"275","severity":1,"message":"290","line":12,"column":13,"nodeType":"277","messageId":"278","endLine":12,"endColumn":17},{"ruleId":"279","severity":1,"message":"291","line":27,"column":8,"nodeType":"281","endLine":27,"endColumn":10,"suggestions":"292"},{"ruleId":"279","severity":1,"message":"293","line":32,"column":8,"nodeType":"281","endLine":32,"endColumn":10,"suggestions":"294"},{"ruleId":"275","severity":1,"message":"295","line":12,"column":36,"nodeType":"277","messageId":"278","endLine":12,"endColumn":42},{"ruleId":"279","severity":1,"message":"280","line":20,"column":8,"nodeType":"281","endLine":20,"endColumn":10,"suggestions":"296"},{"ruleId":"297","severity":1,"message":"298","line":93,"column":46,"nodeType":"299","endLine":93,"endColumn":134},{"ruleId":"279","severity":1,"message":"300","line":23,"column":8,"nodeType":"281","endLine":23,"endColumn":16,"suggestions":"301"},{"ruleId":"302","severity":1,"message":"303","line":20,"column":1,"nodeType":"304","endLine":118,"endColumn":2},{"ruleId":"302","severity":1,"message":"303","line":20,"column":1,"nodeType":"304","endLine":119,"endColumn":2},{"ruleId":"275","severity":1,"message":"305","line":126,"column":13,"nodeType":"277","messageId":"278","endLine":126,"endColumn":17},{"ruleId":"302","severity":1,"message":"303","line":10,"column":1,"nodeType":"304","endLine":58,"endColumn":2},{"ruleId":"302","severity":1,"message":"303","line":13,"column":1,"nodeType":"304","endLine":98,"endColumn":2},{"ruleId":"302","severity":1,"message":"303","line":13,"column":1,"nodeType":"304","endLine":98,"endColumn":2},{"ruleId":"306","severity":1,"message":"307","line":15,"column":70,"nodeType":"308","messageId":"309","endLine":15,"endColumn":71},{"ruleId":"275","severity":1,"message":"310","line":4,"column":8,"nodeType":"277","messageId":"278","endLine":4,"endColumn":13},"no-native-reassign",["311"],"no-negated-in-lhs",["312"],"no-unused-vars","'Nav' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["313"],["314"],["315"],["316"],"'setEmail' is assigned a value but never used.","'setToken' is assigned a value but never used.",["317"],["318"],"'jobs' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'access_token', 'dispatch', 'job_id', and 'user_id'. Either include them or remove the dependency array.",["319"],"React Hook useEffect has missing dependencies: 'access_token', 'dispatch', and 'user_id'. Either include them or remove the dependency array.",["320"],"'loaded' is assigned a value but never used.",["321"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'authAction', 'dispatch', 'history', 'isSubmitting', and 'values'. Either include them or remove the dependency array. If 'authAction' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["322"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'date' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'trash' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"323","fix":"324"},{"desc":"323","fix":"325"},{"desc":"323","fix":"326"},{"desc":"323","fix":"327"},{"desc":"323","fix":"328"},{"desc":"323","fix":"329"},{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},{"desc":"323","fix":"334"},{"desc":"335","fix":"336"},"Update the dependencies array to be: [dispatch]",{"range":"337","text":"338"},{"range":"339","text":"338"},{"range":"340","text":"338"},{"range":"341","text":"338"},{"range":"342","text":"338"},{"range":"343","text":"338"},"Update the dependencies array to be: [access_token, dispatch, job_id, user_id]",{"range":"344","text":"345"},"Update the dependencies array to be: [access_token, dispatch, user_id]",{"range":"346","text":"347"},{"range":"348","text":"338"},"Update the dependencies array to be: [authAction, dispatch, errors, history, isSubmitting, values]",{"range":"349","text":"350"},[1065,1067],"[dispatch]",[1206,1208],[1042,1044],[621,623],[770,772],[910,912],[941,943],"[access_token, dispatch, job_id, user_id]",[1112,1114],"[access_token, dispatch, user_id]",[780,782],[876,884],"[authAction, dispatch, errors, history, isSubmitting, values]"]